#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

// Function to compute Collatz steps
int collatz_steps(unsigned long long n) {
    int steps = 0;
    while (n != 1) {
        if (n % 2 == 0) {
            n /= 2;
        } else {
            n = 3 * n + 1;
        }
        steps++;
    }
    return steps;
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (argc != 3) {
        if (rank == 0) {
            printf("Usage: %s <start> <end>\n", argv[0]);
        }
        MPI_Finalize();
        return 0;
    }

    unsigned long long start = strtoull(argv[1], NULL, 10);
    unsigned long long end = strtoull(argv[2], NULL, 10);
    unsigned long long range = end - start + 1;

    if (rank == 0) {
        unsigned long long local_start, local_end;
        int max_steps = 0;
        unsigned long long number_with_max_steps = 0;

        double start_time = MPI_Wtime();

        // Send tasks to slaves
        unsigned long long chunk_size = (range + size - 1) / size;
        for (int i = 1; i < size; i++) {
            local_start = start + i * chunk_size;
            local_end = (i == size - 1) ? end : (local_start + chunk_size - 1);
            MPI_Send(&local_start, 1, MPI_UNSIGNED_LONG_LONG, i, 0, MPI_COMM_WORLD);
            MPI_Send(&local_end, 1, MPI_UNSIGNED_LONG_LONG, i, 0, MPI_COMM_WORLD);
        }

        // Master process also does computation
        local_start = start;
        local_end = (size == 1) ? end : (start + chunk_size - 1);
        for (unsigned long long i = local_start; i <= local_end; i++) {
            int steps = collatz_steps(i);
            if (steps > max_steps) {
                max_steps = steps;
                number_with_max_steps = i;
            }
        }

        // Receive results from slaves
        for (int i = 1; i < size; i++) {
            int slave_max_steps;
            unsigned long long slave_number_with_max_steps;
            MPI_Recv(&slave_max_steps, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            MPI_Recv(&slave_number_with_max_steps, 1, MPI_UNSIGNED_LONG_LONG, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            if (slave_max_steps > max_steps) {
                max_steps = slave_max_steps;
                number_with_max_steps = slave_number_with_max_steps;
            }
        }

        double end_time = MPI_Wtime();
        printf("Number with max steps: %llu, Steps: %d\n", number_with_max_steps, max_steps);
        printf("Total time taken: %f seconds\n", end_time - start_time);
    } else {
        unsigned long long local_start, local_end;
        int max_steps = 0;
        unsigned long long number_with_max_steps = 0;

        // Receive range from master
        MPI_Recv(&local_start, 1, MPI_UNSIGNED_LONG_LONG, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(&local_end, 1, MPI_UNSIGNED_LONG_LONG, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        for (unsigned long long i = local_start; i <= local_end; i++) {
            int steps = collatz_steps(i);
            if (steps > max_steps) {
                max_steps = steps;
                number_with_max_steps = i;
            }
        }

        // Send results back to master
        MPI_Send(&max_steps, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        MPI_Send(&number_with_max_steps, 1, MPI_UNSIGNED_LONG_LONG, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}